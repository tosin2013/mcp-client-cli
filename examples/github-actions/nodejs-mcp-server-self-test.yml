# GitHub Action for Node.js MCP Server Self-Testing
# Add this file to .github/workflows/ in your Node.js MCP server repository

name: Node.js MCP Server Self-Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_types:
        description: 'Test types to run (comma-separated)'
        required: false
        default: 'functional,security,performance,issue-detection'
      confidence_threshold:
        description: 'Confidence threshold (0.0-1.0)'
        required: false
        default: '0.8'

jobs:
  self-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
    - name: Checkout Node.js MCP Server
      uses: actions/checkout@v4
      with:
        path: nodejs-mcp-server
    
    - name: Checkout MCP Testing Framework
      uses: actions/checkout@v4
      with:
        repository: 'your-org/mcp-client-cli'  # Update with actual repo
        path: mcp-testing-framework
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: nodejs-mcp-server/package-lock.json
    
    - name: Set up Python for Testing Framework
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Node.js MCP Server dependencies
      run: |
        cd nodejs-mcp-server
        npm ci
        # Build if build script exists
        if npm run | grep -q "build"; then npm run build; fi
    
    - name: Install MCP Testing Framework
      run: |
        cd mcp-testing-framework
        python -m pip install --upgrade pip
        pip install -e .
        pip install dagger-io pytest pytest-asyncio pytest-html
    
    - name: Run Self-Testing Workflow
      run: |
        cd mcp-testing-framework
        python scripts/pytest-mcp-server-workflow.py \
          --path ../nodejs-mcp-server \
          --server-type nodejs \
          --test-types ${{ github.event.inputs.test_types || 'functional,security,performance,issue-detection' }} \
          --confidence-threshold ${{ github.event.inputs.confidence_threshold || '0.8' }} \
          --output-dir test-results-node-${{ matrix.node-version }}
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-node-${{ matrix.node-version }}
        path: mcp-testing-framework/test-results-node-${{ matrix.node-version }}/
        retention-days: 30
    
    - name: Upload Integration Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-report-node-${{ matrix.node-version }}
        path: mcp-testing-framework/test-results-node-${{ matrix.node-version }}/*.md
        retention-days: 30
    
    - name: Comment PR with Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read workflow results
          const resultsDir = 'mcp-testing-framework/test-results-node-${{ matrix.node-version }}';
          const resultsFiles = fs.readdirSync(resultsDir).filter(f => f.startsWith('workflow_results_'));
          
          if (resultsFiles.length > 0) {
            const resultsFile = path.join(resultsDir, resultsFiles[0]);
            const results = JSON.parse(fs.readFileSync(resultsFile, 'utf8'));
            
            const comment = `## 🧪 Node.js MCP Self-Testing Results (Node.js ${{ matrix.node-version }})
            
            **Overall Status**: ${results.overall_status}
            **Success Rate**: ${(results.summary?.success_rate * 100 || 0).toFixed(1)}%
            **Confidence**: ${(results.summary?.confidence || 0).toFixed(2)}
            
            ### Steps Executed:
            ${Object.entries(results.steps).map(([step, result]) => 
              `- ${result.status === 'SUCCESS' ? '✅' : '❌'} **${step}**: ${result.message}`
            ).join('\n')}
            
            ${results.summary?.recommendations ? `
            ### 💡 Recommendations:
            ${results.summary.recommendations.map(rec => `- ${rec}`).join('\n')}
            ` : ''}
            
            ---
            *Generated by Node.js MCP server self-testing workflow*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  security-scan:
    runs-on: ubuntu-latest
    needs: self-test
    
    steps:
    - name: Checkout Node.js MCP Server
      uses: actions/checkout@v4
      with:
        path: nodejs-mcp-server
    
    - name: Checkout MCP Testing Framework
      uses: actions/checkout@v4
      with:
        repository: 'your-org/mcp-client-cli'  # Update with actual repo
        path: mcp-testing-framework
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: nodejs-mcp-server/package-lock.json
    
    - name: Set up Python for Testing Framework
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd nodejs-mcp-server
        npm ci
        
        cd ../mcp-testing-framework
        python -m pip install --upgrade pip
        pip install -e .
        
        # Install Node.js security tools
        npm install -g npm-audit-html eslint-plugin-security @microsoft/eslint-plugin-sdl
    
    - name: Run Security-Focused Testing
      run: |
        cd mcp-testing-framework
        python scripts/pytest-mcp-server-workflow.py \
          --path ../nodejs-mcp-server \
          --server-type nodejs \
          --test-types security \
          --confidence-threshold 0.9 \
          --output-dir security-results
    
    - name: Run npm audit
      run: |
        cd nodejs-mcp-server
        npm audit --audit-level=moderate --json > ../mcp-testing-framework/security-results/npm-audit.json || true
        npm-audit-html --input ../mcp-testing-framework/security-results/npm-audit.json --output ../mcp-testing-framework/security-results/npm-audit.html || true
    
    - name: Run ESLint Security Scan
      run: |
        cd nodejs-mcp-server
        # Create temporary eslint config for security scanning
        cat > .eslintrc.security.json << 'EOF'
        {
          "extends": ["eslint:recommended"],
          "plugins": ["security", "@microsoft/sdl"],
          "rules": {
            "security/detect-object-injection": "error",
            "security/detect-non-literal-regexp": "error",
            "security/detect-unsafe-regex": "error",
            "security/detect-buffer-noassert": "error",
            "security/detect-child-process": "error",
            "security/detect-disable-mustache-escape": "error",
            "security/detect-eval-with-expression": "error",
            "security/detect-no-csrf-before-method-override": "error",
            "security/detect-non-literal-fs-filename": "error",
            "security/detect-non-literal-require": "error",
            "security/detect-possible-timing-attacks": "error",
            "security/detect-pseudoRandomBytes": "error",
            "@microsoft/sdl/no-insecure-url": "error",
            "@microsoft/sdl/no-unsafe-innerHTML": "error"
          },
          "env": {
            "node": true,
            "es2022": true
          },
          "parserOptions": {
            "ecmaVersion": 2022,
            "sourceType": "module"
          }
        }
        EOF
        
        npx eslint . --config .eslintrc.security.json --format json --output-file ../mcp-testing-framework/security-results/eslint-security.json || true
    
    - name: Run Semgrep Security Scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/nodejs
          p/typescript
        generateSarif: "1"
        publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
      continue-on-error: true
    
    - name: Upload Security Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: |
          mcp-testing-framework/security-results/
          semgrep.sarif
        retention-days: 90

  performance-benchmark:
    runs-on: ubuntu-latest
    needs: self-test
    
    steps:
    - name: Checkout Node.js MCP Server
      uses: actions/checkout@v4
      with:
        path: nodejs-mcp-server
    
    - name: Checkout MCP Testing Framework
      uses: actions/checkout@v4
      with:
        repository: 'your-org/mcp-client-cli'  # Update with actual repo
        path: mcp-testing-framework
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: nodejs-mcp-server/package-lock.json
    
    - name: Set up Python for Testing Framework
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd nodejs-mcp-server
        npm ci
        
        cd ../mcp-testing-framework
        python -m pip install --upgrade pip
        pip install -e .
        pip install psutil memory-profiler
        
        # Install Node.js performance tools
        npm install -g clinic autocannon
    
    - name: Run Performance Testing
      run: |
        cd mcp-testing-framework
        python scripts/pytest-mcp-server-workflow.py \
          --path ../nodejs-mcp-server \
          --server-type nodejs \
          --test-types performance \
          --confidence-threshold 0.8 \
          --output-dir performance-results
    
    - name: Run Node.js Performance Profiling
      run: |
        cd nodejs-mcp-server
        
        # Start server in background for profiling
        if [ -f "package.json" ] && npm run | grep -q "start"; then
          timeout 30s npm start &
          SERVER_PID=$!
          sleep 5
          
          # Run autocannon load test if server is running
          if kill -0 $SERVER_PID 2>/dev/null; then
            autocannon -c 10 -d 10 -j http://localhost:3000 > ../mcp-testing-framework/performance-results/autocannon-results.json || true
          fi
          
          # Clean up
          kill $SERVER_PID 2>/dev/null || true
        fi
    
    - name: Upload Performance Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-benchmark-results
        path: mcp-testing-framework/performance-results/
        retention-days: 30

  dependency-check:
    runs-on: ubuntu-latest
    needs: self-test
    
    steps:
    - name: Checkout Node.js MCP Server
      uses: actions/checkout@v4
      with:
        path: nodejs-mcp-server
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: nodejs-mcp-server/package-lock.json
    
    - name: Install dependencies
      run: |
        cd nodejs-mcp-server
        npm ci
    
    - name: Check for outdated packages
      run: |
        cd nodejs-mcp-server
        npm outdated --json > outdated-packages.json || true
        
        # Create summary
        echo "# 📦 Dependency Check Results" > dependency-summary.md
        echo "" >> dependency-summary.md
        echo "**Date**: $(date -u)" >> dependency-summary.md
        echo "" >> dependency-summary.md
        
        if [ -s outdated-packages.json ]; then
          echo "## 📊 Outdated Packages" >> dependency-summary.md
          echo "Found outdated packages. See outdated-packages.json for details." >> dependency-summary.md
        else
          echo "## ✅ All packages are up to date" >> dependency-summary.md
        fi
    
    - name: Run license check
      run: |
        cd nodejs-mcp-server
        npx license-checker --json > licenses.json || true
        
        echo "" >> dependency-summary.md
        echo "## 📄 License Information" >> dependency-summary.md
        echo "License information available in licenses.json" >> dependency-summary.md
    
    - name: Upload Dependency Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-check-results
        path: |
          nodejs-mcp-server/outdated-packages.json
          nodejs-mcp-server/licenses.json
          nodejs-mcp-server/dependency-summary.md
        retention-days: 30

  generate-summary:
    runs-on: ubuntu-latest
    needs: [self-test, security-scan, performance-benchmark, dependency-check]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate Summary Report
      run: |
        echo "# 📊 Node.js MCP Server Testing Summary" > summary.md
        echo "" >> summary.md
        echo "**Date**: $(date -u)" >> summary.md
        echo "**Commit**: ${{ github.sha }}" >> summary.md
        echo "**Workflow**: ${{ github.workflow }}" >> summary.md
        echo "" >> summary.md
        
        echo "## 🧪 Test Results by Node.js Version" >> summary.md
        for dir in test-results-node-*; do
          if [ -d "$dir" ]; then
            version=$(echo $dir | sed 's/test-results-node-//')
            echo "### Node.js $version" >> summary.md
            if [ -f "$dir/workflow_results_*.json" ]; then
              # Extract key metrics from JSON (simplified)
              echo "- Status: Available in artifacts" >> summary.md
            else
              echo "- Status: No results found" >> summary.md
            fi
            echo "" >> summary.md
          fi
        done
        
        echo "## 🔒 Security Scan Results" >> summary.md
        if [ -d "security-scan-results" ]; then
          echo "- Security testing completed" >> summary.md
          echo "- npm audit results available" >> summary.md
          echo "- ESLint security scan completed" >> summary.md
          echo "- Results available in artifacts" >> summary.md
        else
          echo "- Security scan not completed" >> summary.md
        fi
        echo "" >> summary.md
        
        echo "## ⚡ Performance Benchmark Results" >> summary.md
        if [ -d "performance-benchmark-results" ]; then
          echo "- Performance testing completed" >> summary.md
          echo "- Load testing with autocannon completed" >> summary.md
          echo "- Results available in artifacts" >> summary.md
        else
          echo "- Performance benchmark not completed" >> summary.md
        fi
        echo "" >> summary.md
        
        echo "## 📦 Dependency Check Results" >> summary.md
        if [ -d "dependency-check-results" ]; then
          echo "- Dependency analysis completed" >> summary.md
          echo "- License check completed" >> summary.md
          echo "- Results available in artifacts" >> summary.md
        else
          echo "- Dependency check not completed" >> summary.md
        fi
        echo "" >> summary.md
        
        echo "## 📁 Available Artifacts" >> summary.md
        echo "- Test results for each Node.js version" >> summary.md
        echo "- Integration reports" >> summary.md
        echo "- Security scan results (npm audit, ESLint, Semgrep)" >> summary.md
        echo "- Performance benchmark results" >> summary.md
        echo "- Dependency check results" >> summary.md
        echo "" >> summary.md
        
        echo "---" >> summary.md
        echo "*Generated by Node.js MCP server self-testing workflow*" >> summary.md
    
    - name: Upload Summary Report
      uses: actions/upload-artifact@v3
      with:
        name: testing-summary
        path: summary.md
        retention-days: 90
    
    - name: Create Issue on Failure
      if: failure() && github.event_name == 'schedule'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 Scheduled Node.js MCP Self-Testing Failed',
            body: `The scheduled Node.js MCP self-testing workflow failed.
            
            **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            **Commit**: ${{ github.sha }}
            **Date**: ${new Date().toISOString()}
            
            Please review the workflow logs and test results to identify and resolve any issues.
            
            ## 🔍 Areas to Check:
            - Node.js MCP server functionality
            - Security vulnerabilities (npm audit, ESLint)
            - Performance regressions
            - Dependency issues
            - Test framework compatibility
            
            ---
            *This issue was automatically created by the Node.js self-testing workflow.*`,
            labels: ['bug', 'testing', 'automated', 'nodejs']
          }); 